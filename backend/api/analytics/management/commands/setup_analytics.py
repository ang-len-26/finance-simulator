from api.core.management.base import FinTrackBaseCommand
from django.contrib.auth.models import User
from django.utils import timezone
from decimal import Decimal
from datetime import timedelta

from api.analytics.models import FinancialMetric, CategorySummary, BudgetAlert
from api.transactions.models import Category
from api.accounts.models import Account

class Command(FinTrackBaseCommand):
    help = 'Configurar sistema de analytics y m√©tricas iniciales'
    
    def handle(self, *args, **options):
        self.stdout.write("üìä ANALYTICS - Configurando sistema de m√©tricas...")
        
        self.setup_demo_metrics()
        self.setup_demo_category_summaries()
        self.setup_demo_alerts()
        self.print_summary("ANALYTICS - CONFIGURACI√ìN COMPLETADA", "analytics")
    
    def setup_demo_metrics(self):
        """Crear m√©tricas financieras para usuario demo"""
        self.stdout.write("\nüìà Creando m√©tricas financieras demo...")
        
        try:
            demo_user = User.objects.filter(username="demo").first()
            if not demo_user:
                self.log_info("Usuario demo no encontrado - ejecutar despu√©s de crear demo")
                return
            
            today = timezone.now().date()
            
            # M√©tricas mensuales de los √∫ltimos 3 meses
            monthly_metrics = [
                {
                    'period_type': 'monthly',
                    'period_start': today.replace(day=1) - timedelta(days=60),
                    'period_end': today.replace(day=1) - timedelta(days=31),
                    'total_income': Decimal('5200.00'),
                    'total_expenses': Decimal('2850.00'),
                    'net_balance': Decimal('2350.00'),
                    'checking_balance': Decimal('8500.00'),
                    'savings_balance': Decimal('12000.00'),
                    'investment_balance': Decimal('3500.00'),
                    'transaction_count': 28,
                    'top_expense_amount': Decimal('450.00')
                },
                {
                    'period_type': 'monthly',
                    'period_start': today.replace(day=1) - timedelta(days=31),
                    'period_end': today.replace(day=1) - timedelta(days=1),
                    'total_income': Decimal('4800.00'),
                    'total_expenses': Decimal('3200.00'),
                    'net_balance': Decimal('1600.00'),
                    'checking_balance': Decimal('8200.00'),
                    'savings_balance': Decimal('15200.00'),
                    'investment_balance': Decimal('4300.00'),
                    'transaction_count': 35,
                    'top_expense_amount': Decimal('520.00')
                },
                {
                    'period_type': 'monthly',
                    'period_start': today.replace(day=1),
                    'period_end': today,
                    'total_income': Decimal('4800.00'),
                    'total_expenses': Decimal('2100.00'),
                    'net_balance': Decimal('2700.00'),
                    'checking_balance': Decimal('8800.00'),
                    'savings_balance': Decimal('16500.00'),
                    'investment_balance': Decimal('5100.00'),
                    'transaction_count': 18,
                    'top_expense_amount': Decimal('280.00')
                }
            ]
            
            # Obtener categor√≠a m√°s com√∫n para gastos
            alimentacion_category = Category.objects.filter(slug='alimentacion').first()
            
            created_count = 0
            for metric_data in monthly_metrics:
                metric, created = FinancialMetric.objects.get_or_create(
                    user=demo_user,
                    period_type=metric_data['period_type'],
                    period_start=metric_data['period_start'],
                    period_end=metric_data['period_end'],
                    defaults={
                        **metric_data,
                        'top_expense_category': alimentacion_category
                    }
                )
                if created:
                    created_count += 1
            
            # M√©tricas semanales actuales
            week_start = today - timedelta(days=today.weekday())
            week_end = week_start + timedelta(days=6)
            
            FinancialMetric.objects.get_or_create(
                user=demo_user,
                period_type='weekly',
                period_start=week_start,
                period_end=week_end,
                defaults={
                    'total_income': Decimal('1200.00'),
                    'total_expenses': Decimal('650.00'),
                    'net_balance': Decimal('550.00'),
                    'checking_balance': Decimal('8800.00'),
                    'savings_balance': Decimal('16500.00'),
                    'transaction_count': 8,
                    'top_expense_category': alimentacion_category,
                    'top_expense_amount': Decimal('180.00')
                }
            )
            
            self.log_success(f"M√©tricas financieras demo creadas: {created_count + 1}")
            
        except Exception as e:
            self.log_error(f"Error al crear m√©tricas demo: {e}")
    
    def setup_demo_category_summaries(self):
        """Crear res√∫menes de categor√≠as para usuario demo"""
        self.stdout.write("\nüìÇ Creando res√∫menes de categor√≠as demo...")
        
        try:
            demo_user = User.objects.filter(username="demo").first()
            if not demo_user:
                self.log_info("Usuario demo no encontrado, saltando res√∫menes")
                return
            
            today = timezone.now().date()
            month_start = today.replace(day=1)
            month_end = today
            
            # Obtener cuentas demo
            bcp_account = Account.objects.filter(user=demo_user, bank_name="BCP").first()
            
            # Crear res√∫menes para categor√≠as principales
            category_summaries = [
                {
                    'category_slug': 'alimentacion',
                    'total_amount': Decimal('580.50'),
                    'transaction_count': 12,
                    'average_amount': Decimal('48.38'),
                    'previous_period_amount': Decimal('620.00'),
                    'percentage_change': Decimal('-6.37')
                },
                {
                    'category_slug': 'transporte',
                    'total_amount': Decimal('285.00'),
                    'transaction_count': 8,
                    'average_amount': Decimal('35.63'),
                    'previous_period_amount': Decimal('245.00'),
                    'percentage_change': Decimal('16.33')
                },
                {
                    'category_slug': 'servicios',
                    'total_amount': Decimal('124.90'),
                    'transaction_count': 3,
                    'average_amount': Decimal('41.63'),
                    'previous_period_amount': Decimal('98.50'),
                    'percentage_change': Decimal('26.80')
                },
                {
                    'category_slug': 'entretenimiento',
                    'total_amount': Decimal('180.00'),
                    'transaction_count': 5,
                    'average_amount': Decimal('36.00'),
                    'previous_period_amount': Decimal('220.00'),
                    'percentage_change': Decimal('-18.18')
                },
                {
                    'category_slug': 'salario',
                    'total_amount': Decimal('4500.00'),
                    'transaction_count': 1,
                    'average_amount': Decimal('4500.00'),
                    'previous_period_amount': Decimal('4500.00'),
                    'percentage_change': Decimal('0.00')
                }
            ]
            
            created_count = 0
            for summary_data in category_summaries:
                category = Category.objects.filter(slug=summary_data['category_slug']).first()
                if category:
                    summary, created = CategorySummary.objects.get_or_create(
                        user=demo_user,
                        category=category,
                        period_start=month_start,
                        period_end=month_end,
                        period_type='monthly',
                        defaults={
                            'total_amount': summary_data['total_amount'],
                            'transaction_count': summary_data['transaction_count'],
                            'average_amount': summary_data['average_amount'],
                            'previous_period_amount': summary_data['previous_period_amount'],
                            'percentage_change': summary_data['percentage_change'],
                            'most_used_account': bcp_account
                        }
                    )
                    if created:
                        created_count += 1
            
            self.log_success(f"Res√∫menes de categor√≠as demo creados: {created_count}")
            
        except Exception as e:
            self.log_error(f"Error al crear res√∫menes de categor√≠as: {e}")
    
    def setup_demo_alerts(self):
        """Crear alertas de ejemplo para usuario demo"""
        self.stdout.write("\nüö® Creando alertas demo...")
        
        try:
            demo_user = User.objects.filter(username="demo").first()
            if not demo_user:
                self.log_info("Usuario demo no encontrado, saltando alertas")
                return
            
            # Obtener categor√≠as y cuentas
            alimentacion_category = Category.objects.filter(slug='alimentacion').first()
            bcp_account = Account.objects.filter(user=demo_user, bank_name="BCP").first()
            
            # Crear alertas de ejemplo
            demo_alerts = [
                {
                    'alert_type': 'category_spike',
                    'severity': 'medium',
                    'title': 'Gasto Alto en Alimentaci√≥n',
                    'message': 'Has gastado 15% m√°s de lo usual en alimentaci√≥n este mes.',
                    'related_category': alimentacion_category,
                    'threshold_amount': Decimal('500.00'),
                    'actual_amount': Decimal('580.50')
                },
                {
                    'alert_type': 'budget_exceeded',
                    'severity': 'high',
                    'title': 'Presupuesto Mensual Superado',
                    'message': 'Has superado tu presupuesto mensual de gastos por S/.150.',
                    'threshold_amount': Decimal('2000.00'),
                    'actual_amount': Decimal('2150.00')
                },
                {
                    'alert_type': 'account_low',
                    'severity': 'low',
                    'title': 'Saldo Bajo en Efectivo',
                    'message': 'Tu cuenta de efectivo est√° por debajo de S/.500.',
                    'related_account': Account.objects.filter(
                        user=demo_user, 
                        account_type='cash'
                    ).first(),
                    'threshold_amount': Decimal('500.00'),
                    'actual_amount': Decimal('200.00')
                }
            ]
            
            created_count = 0
            for alert_data in demo_alerts:
                alert, created = BudgetAlert.objects.get_or_create(
                    user=demo_user,
                    alert_type=alert_data['alert_type'],
                    title=alert_data['title'],
                    defaults=alert_data
                )
                if created:
                    created_count += 1
            
            self.log_success(f"Alertas demo creadas: {created_count}")
            
        except Exception as e:
            self.log_error(f"Error al crear alertas demo: {e}")

    def get_summary_stats(self):
        """Obtener estad√≠sticas para el resumen"""
        metrics_count = FinancialMetric.objects.count()
        category_summaries_count = CategorySummary.objects.count()
        alerts_count = BudgetAlert.objects.count()
		
        return [
			f"üìä Total m√©tricas: {metrics_count}",
			f"üìÇ Total res√∫menes de categor√≠as: {category_summaries_count}",
			f"üö® Total alertas: {alerts_count}",
            f"\nüí° Comandos √∫tiles:",
            f"   python manage.py generate_metrics",
		]